// This file is autogenerated by the spaceschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('spaceschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @namespace-1/basic-bools
const encoding0 = {
  preencode (state, m) {
    state.end++ // max flag is 8 so always one byte
  },
  encode (state, m) {
    const flags =
      (m.bool1 ? 1 : 0) |
      (m.bool2 ? 2 : 0) |
      (m.bool3 ? 4 : 0) |
      (m.bool4 ? 8 : 0)

    c.uint.encode(state, flags)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      bool1: (flags & 1) !== 0,
      bool2: (flags & 2) !== 0,
      bool3: (flags & 4) !== 0,
      bool4: (flags & 8) !== 0
    }
  }
}

// @namespace-1/basic-no-optionals
const encoding1 = {
  preencode (state, m) {
    c.uint.preencode(state, m.id)
    state.end++ // max flag is 1 so always one byte

    if (m.other) c.uint.preencode(state, m.other)
  },
  encode (state, m) {
    const flags = m.other ? 1 : 0

    c.uint.encode(state, m.id)
    c.uint.encode(state, flags)

    if (m.other) c.uint.encode(state, m.other)
  },
  decode (state) {
    const r0 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      other: (flags & 1) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @namespace-1/basic-single-optional
const encoding2 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.id) c.uint.preencode(state, m.id)
  },
  encode (state, m) {
    const flags = m.id ? 1 : 0

    c.uint.encode(state, flags)

    if (m.id) c.uint.encode(state, m.id)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      id: (flags & 1) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @namespace-1/basic-struct.basicArray
const encoding3_2 = c.array(c.uint)

// @namespace-1/basic-struct
const encoding3 = {
  preencode (state, m) {
    state.end++ // max flag is 16 so always one byte
    c.uint.preencode(state, m.id)
    c.string.preencode(state, m.basicString)

    if (m.basicArray) encoding3_2.preencode(state, m.basicArray)
    if (m.basicAlias) c.string.preencode(state, m.basicAlias)
    if (m.anotherString) c.string.preencode(state, m.anotherString)
    if (m.andAnother) c.uint.preencode(state, m.andAnother)
    if (m.yetAnother) c.string.preencode(state, m.yetAnother)
  },
  encode (state, m) {
    const flags =
      (m.basicArray ? 1 : 0) |
      (m.basicAlias ? 2 : 0) |
      (m.anotherString ? 4 : 0) |
      (m.andAnother ? 8 : 0) |
      (m.yetAnother ? 16 : 0)

    c.uint.encode(state, flags)
    c.uint.encode(state, m.id)
    c.string.encode(state, m.basicString)

    if (m.basicArray) encoding3_2.encode(state, m.basicArray)
    if (m.basicAlias) c.string.encode(state, m.basicAlias)
    if (m.anotherString) c.string.encode(state, m.anotherString)
    if (m.andAnother) c.uint.encode(state, m.andAnother)
    if (m.yetAnother) c.string.encode(state, m.yetAnother)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      id: c.uint.decode(state),
      basicString: c.string.decode(state),
      basicArray: (flags & 1) !== 0 ? encoding3_2.decode(state) : 0,
      basicAlias: (flags & 2) !== 0 ? c.string.decode(state) : null,
      anotherString: (flags & 4) !== 0 ? c.string.decode(state) : null,
      andAnother: (flags & 8) !== 0 ? c.uint.decode(state) : 0,
      yetAnother: (flags & 16) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @namespace-1/basic-compact-struct.basicArray
const encoding4_2 = encoding3_2

// @namespace-1/basic-compact-struct
const encoding4 = {
  preencode (state, m) {
    c.uint.preencode(state, m.id)
    c.string.preencode(state, m.basicString)
    state.end++ // max flag is 4 so always one byte

    if (m.basicArray) encoding4_2.preencode(state, m.basicArray)
    if (m.basicAlias) c.string.preencode(state, m.basicAlias)
    if (m.anotherString) c.string.preencode(state, m.anotherString)
  },
  encode (state, m) {
    const flags =
      (m.basicArray ? 1 : 0) |
      (m.basicAlias ? 2 : 0) |
      (m.anotherString ? 4 : 0)

    c.uint.encode(state, m.id)
    c.string.encode(state, m.basicString)
    c.uint.encode(state, flags)

    if (m.basicArray) encoding4_2.encode(state, m.basicArray)
    if (m.basicAlias) c.string.encode(state, m.basicAlias)
    if (m.anotherString) c.string.encode(state, m.anotherString)
  },
  decode (state) {
    const r0 = c.uint.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      basicString: r1,
      basicArray: (flags & 1) !== 0 ? encoding4_2.decode(state) : 0,
      basicAlias: (flags & 2) !== 0 ? c.string.decode(state) : null,
      anotherString: (flags & 4) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @namespace-1/basic-embedded-struct.embedded
const encoding5_1 = c.frame(encoding3)
// @namespace-1/basic-embedded-struct.embedded2
const encoding5_2 = encoding5_1
// @namespace-1/basic-embedded-struct.embedded3
const encoding5_3 = encoding5_1
// @namespace-1/basic-embedded-struct.embedded4
const encoding5_4 = encoding5_1

// @namespace-1/basic-embedded-struct
const encoding5 = {
  preencode (state, m) {
    c.string.preencode(state, m.outerString)
    state.end++ // max flag is 8 so always one byte

    if (m.embedded) encoding5_1.preencode(state, m.embedded)
    if (m.embedded2) encoding5_2.preencode(state, m.embedded2)
    if (m.embedded3) encoding5_3.preencode(state, m.embedded3)
    if (m.embedded4) encoding5_4.preencode(state, m.embedded4)
  },
  encode (state, m) {
    const flags =
      (m.embedded ? 1 : 0) |
      (m.embedded2 ? 2 : 0) |
      (m.embedded3 ? 4 : 0) |
      (m.embedded4 ? 8 : 0)

    c.string.encode(state, m.outerString)
    c.uint.encode(state, flags)

    if (m.embedded) encoding5_1.encode(state, m.embedded)
    if (m.embedded2) encoding5_2.encode(state, m.embedded2)
    if (m.embedded3) encoding5_3.encode(state, m.embedded3)
    if (m.embedded4) encoding5_4.encode(state, m.embedded4)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      outerString: r0,
      embedded: (flags & 1) !== 0 ? encoding5_1.decode(state) : null,
      embedded2: (flags & 2) !== 0 ? encoding5_2.decode(state) : null,
      embedded3: (flags & 4) !== 0 ? encoding5_3.decode(state) : null,
      embedded4: (flags & 8) !== 0 ? encoding5_4.decode(state) : null
    }
  }
}

// @namespace-1/basic-compact-embedded-struct
const encoding6 = {
  preencode (state, m) {
    c.string.preencode(state, m.outerString)
    state.end++ // max flag is 2 so always one byte

    if (m.embeddedCompact) encoding4.preencode(state, m.embeddedCompact)
    if (m.embeddedNone) c.none.preencode(state, m.embeddedNone)
  },
  encode (state, m) {
    const flags =
      (m.embeddedCompact ? 1 : 0) |
      (m.embeddedNone ? 2 : 0)

    c.string.encode(state, m.outerString)
    c.uint.encode(state, flags)

    if (m.embeddedCompact) encoding4.encode(state, m.embeddedCompact)
    if (m.embeddedNone) c.none.encode(state, m.embeddedNone)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      outerString: r0,
      embeddedCompact: (flags & 1) !== 0 ? encoding4.decode(state) : null,
      embeddedNone: (flags & 2) !== 0 ? c.none.decode(state) : null
    }
  }
}

// @namespace-1/deeper-embedded-struct.embedded
const encoding7_1 = c.frame(encoding5)

// @namespace-1/deeper-embedded-struct
const encoding7 = {
  preencode (state, m) {
    c.string.preencode(state, m.outerString)
    state.end++ // max flag is 2 so always one byte

    if (m.embedded) encoding7_1.preencode(state, m.embedded)
    if (m.another) c.uint.preencode(state, m.another)
  },
  encode (state, m) {
    const flags =
      (m.embedded ? 1 : 0) |
      (m.another ? 2 : 0)

    c.string.encode(state, m.outerString)
    c.uint.encode(state, flags)

    if (m.embedded) encoding7_1.encode(state, m.embedded)
    if (m.another) c.uint.encode(state, m.another)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      outerString: r0,
      embedded: (flags & 1) !== 0 ? encoding7_1.decode(state) : null,
      another: (flags & 2) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @namespace-1/deeper-embedded-struct-2.embedded
const encoding8_1 = encoding7_1

// @namespace-1/deeper-embedded-struct-2
const encoding8 = {
  preencode (state, m) {
    c.string.preencode(state, m.outerString)
    state.end++ // max flag is 8 so always one byte

    if (m.embedded) encoding8_1.preencode(state, m.embedded)
    if (m["an-optional"]) c.string.preencode(state, m["an-optional"])
    if (m.another) c.uint.preencode(state, m.another)
    if (m["another-one"]) c.uint.preencode(state, m["another-one"])
  },
  encode (state, m) {
    const flags =
      (m.embedded ? 1 : 0) |
      (m["an-optional"] ? 2 : 0) |
      (m.another ? 4 : 0) |
      (m["another-one"] ? 8 : 0)

    c.string.encode(state, m.outerString)
    c.uint.encode(state, flags)

    if (m.embedded) encoding8_1.encode(state, m.embedded)
    if (m["an-optional"]) c.string.encode(state, m["an-optional"])
    if (m.another) c.uint.encode(state, m.another)
    if (m["another-one"]) c.uint.encode(state, m["another-one"])
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      outerString: r0,
      embedded: (flags & 1) !== 0 ? encoding8_1.decode(state) : null,
      "an-optional": (flags & 2) !== 0 ? c.string.decode(state) : null,
      another: (flags & 4) !== 0 ? c.uint.decode(state) : 0,
      "another-one": (flags & 8) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @namespace-1/single-bool-at-end
const encoding9 = {
  preencode (state, m) {
    c.string.preencode(state, m.string1)
    c.string.preencode(state, m.string2)
    state.end++ // max flag is 1 so always one byte
  },
  encode (state, m) {
    const flags = m.optional ? 1 : 0

    c.string.encode(state, m.string1)
    c.string.encode(state, m.string2)
    c.uint.encode(state, flags)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      string1: r0,
      string2: r1,
      optional: (flags & 1) !== 0
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@namespace-1/basic-bools': return encoding0
    case '@namespace-1/basic-no-optionals': return encoding1
    case '@namespace-1/basic-single-optional': return encoding2
    case '@namespace-1/basic-struct': return encoding3
    case '@namespace-1/basic-compact-struct': return encoding4
    case '@namespace-1/basic-embedded-struct': return encoding5
    case '@namespace-1/basic-compact-embedded-struct': return encoding6
    case '@namespace-1/deeper-embedded-struct': return encoding7
    case '@namespace-1/deeper-embedded-struct-2': return encoding8
    case '@namespace-1/single-bool-at-end': return encoding9
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
